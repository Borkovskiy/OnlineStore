{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/Desktop/Project Online-store/OnlineStore/src/main/js/src/components/section/Registration/UserProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createContext } from 'react';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = props => {\n  _s();\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const [forgotEmail, setForgotEmail] = useState(\"\");\n  const initialValues = {\n    email: '',\n    password: ''\n  };\n\n  const getCurrentUser = async function () {\n    const currentUser = await Parse.User.currentAsync();\n\n    if (currentUser !== null) {\n      Alert.alert('Success!', `${currentUser.get('username')} is the current user!`);\n    }\n\n    return currentUser;\n  };\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email('please enter valid email').required(\"Required\"),\n    password: Yup.string().required(\"Required\")\n  });\n\n  const onSubmit = (values, props) => {\n    console.log(values);\n    setTimeout(() => {\n      props.resetForm();\n      props.setSubmitting(true);\n    }, 2000);\n    console.log(props);\n    fetch('login', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(() => {\n      console.log('user-info: ', values);\n      localStorage.setItem('user-info: ', JSON.stringify(values));\n    });\n  };\n\n  const forgotSubmit = e => {\n    e.preventDefault();\n    const data = {\n      forgotEmail\n    };\n    fetch('forgot_password', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: data\n    }).then(() => {\n      console.log('your email: ', data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      show,\n      initialValues,\n      validationSchema,\n      onSubmit,\n      handleClose,\n      forgotSubmit,\n      setForgotEmail,\n      handleShow\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserProvider, \"+pYlvdP4qVhDL8Vn7kb0VkLn73g=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/Users/macuser/Desktop/Project Online-store/OnlineStore/src/main/js/src/components/section/Registration/UserProvider.js"],"names":["React","useState","createContext","Yup","UserContext","UserProvider","props","show","setShow","handleClose","handleShow","forgotEmail","setForgotEmail","initialValues","email","password","getCurrentUser","currentUser","Parse","User","currentAsync","Alert","alert","get","validationSchema","object","shape","string","required","onSubmit","values","console","log","setTimeout","resetForm","setSubmitting","fetch","method","headers","body","JSON","stringify","then","localStorage","setItem","forgotSubmit","e","preventDefault","data","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { createContext } from 'react'\nimport * as Yup from 'yup'\n\nexport const UserContext = createContext()\n\nexport const UserProvider = (props) => {\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const [forgotEmail, setForgotEmail] = useState(\"\")\n\n    const initialValues = {\n        email: '',\n        password: '',\n    }\n\n    const getCurrentUser = async function () {\n        const currentUser = await Parse.User.currentAsync();\n        if (currentUser !== null) {\n          Alert.alert(\n            'Success!',\n            `${currentUser.get('username')} is the current user!`,\n          );\n        }\n        return currentUser;\n      };\n\n    const validationSchema = Yup.object().shape({\n        email: Yup.string().email('please enter valid email').required(\"Required\"),\n        password: Yup.string().required(\"Required\")\n    })\n\n    const onSubmit = (values, props) => {\n        console.log(values)\n        setTimeout(() => {\n            props.resetForm()\n            props.setSubmitting(true)\n        }, 2000)\n        console.log(props)\n\n        fetch('login', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(values)\n        }).then(() => {\n            console.log('user-info: ', values)\n            localStorage.setItem('user-info: ', JSON.stringify(values))\n        })\n    }\n\n    const forgotSubmit = (e) => {\n        e.preventDefault();\n        const data = { forgotEmail };\n\n        fetch('forgot_password', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: data\n        }).then(() => {\n            console.log('your email: ', data)\n        })\n    }\n\n    return (\n        <UserContext.Provider value={{show, initialValues, validationSchema, onSubmit, handleClose, forgotSubmit, setForgotEmail, handleShow }}>\n          {props.children}\n        </UserContext.Provider>\n      );\n}"]},"metadata":{},"sourceType":"module"}