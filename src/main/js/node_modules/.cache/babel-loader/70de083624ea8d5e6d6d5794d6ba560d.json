{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/Desktop/Project Online-store/OnlineStore/src/main/js/src/components/section/Registration/Login.js\";\nimport React, { useContext } from 'react';\nimport { Grid, Typography, Avatar, TextField, Paper } from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { NavLink, Link } from 'react-router-dom';\nimport './Login.css';\nimport { Modal, Button } from 'react-bootstrap';\nimport { UserContext } from './UserProvider';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  // const { show, handleClose, initialValues, validationSchema, onSubmit, forgotSubmit, setForgotEmail, handleShow } = useContext(UserContext)\n  const paperStyle = {\n    margin: '0 auto'\n  };\n  const avatarStyle = {\n    backgroundColor: 'lightseagreen'\n  };\n  const btnstyle = {\n    marginTop: '8px',\n    marginBottom: '8px'\n  };\n  const linkButton = {\n    marginTop: '8px'\n  };\n  const initialValues = {\n    email: '',\n    password: ''\n  };\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email('please enter valid email').required(\"Required\"),\n    password: Yup.string().required(\"Required\")\n  });\n\n  const onSubmit = (values, props) => {\n    console.log(values);\n    setTimeout(() => {\n      props.resetForm();\n      props.setSubmitting(false);\n    }, 2000);\n    console.log(props);\n    fetch('login', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(values)\n    }).then(() => {\n      console.log('user-info: ', values);\n      localStorage.setItem('user-info: ', JSON.stringify(values));\n    });\n  };\n\n  const forgotSubmit = e => {\n    e.preventDefault();\n    const data = {\n      forgotEmail\n    };\n    fetch('forgot_password', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: data\n    }).then(() => {\n      console.log('your email: ', data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" */}\", /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: \"paperStyle\",\n        style: paperStyle,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          align: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            style: avatarStyle,\n            children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: initialValues,\n          onSubmit: onSubmit,\n          validationSchema: validationSchema,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              as: TextField,\n              type: \"email\",\n              label: \"Email\",\n              name: \"email\",\n              placeholder: \"Enter your email\",\n              fullWidth: true,\n              required: true,\n              helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              as: TextField,\n              type: \"password\",\n              label: \"Password\",\n              name: \"password\",\n              placeholder: \"Enter your password\",\n              fullWidth: true,\n              required: true,\n              helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 169\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"dark\",\n              style: btnstyle,\n              disabled: props.isSubmitting,\n              className: \"btn-block\",\n              children: props.isSubmitting ? \"Loading\" : \"Log in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/oauth2/authorization/google\",\n          children: \"Sign in with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#\",\n            style: linkButton,\n            onClick: handleShow,\n            children: \"Forget password?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\" Do you have an account?\\xA0\", /*#__PURE__*/_jsxDEV(NavLink, {\n            to: \"/signup\",\n            children: \"Sign up?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/macuser/Desktop/Project Online-store/OnlineStore/src/main/js/src/components/section/Registration/Login.js"],"names":["React","useContext","Grid","Typography","Avatar","TextField","Paper","LockOutlinedIcon","NavLink","Link","Modal","Button","UserContext","Formik","Form","Field","ErrorMessage","Yup","Login","paperStyle","margin","avatarStyle","backgroundColor","btnstyle","marginTop","marginBottom","linkButton","initialValues","email","password","validationSchema","object","shape","string","required","onSubmit","values","props","console","log","setTimeout","resetForm","setSubmitting","fetch","method","headers","body","JSON","stringify","then","localStorage","setItem","forgotSubmit","e","preventDefault","data","forgotEmail","isSubmitting","handleShow"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { Grid, Typography, Avatar, TextField, Paper } from '@material-ui/core'\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { NavLink, Link } from 'react-router-dom'\nimport './Login.css'\nimport { Modal, Button } from 'react-bootstrap'\nimport { UserContext } from './UserProvider'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport * as Yup from 'yup'\n\n\nconst Login = () => {\n    // const { show, handleClose, initialValues, validationSchema, onSubmit, forgotSubmit, setForgotEmail, handleShow } = useContext(UserContext)\n\n    const paperStyle = { margin: '0 auto' }\n    const avatarStyle = { backgroundColor: 'lightseagreen' }\n    const btnstyle = { marginTop: '8px', marginBottom: '8px' }\n    const linkButton = { marginTop: '8px' }\n\n\n    const initialValues = {\n        email: '',\n        password: '',\n    }\n\n    const validationSchema = Yup.object().shape({\n        email: Yup.string().email('please enter valid email').required(\"Required\"),\n        password: Yup.string().required(\"Required\")\n    })\n\n    const onSubmit = (values, props) => {\n        console.log(values)\n        setTimeout(() => {\n            props.resetForm()\n            props.setSubmitting(false)\n        }, 2000)\n        console.log(props)\n\n        fetch('login', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(values)\n        }).then(() => {\n            console.log('user-info: ', values)\n            localStorage.setItem('user-info: ', JSON.stringify(values))\n        })\n    }\n\n    const forgotSubmit = (e) => {\n        e.preventDefault();\n        const data = { forgotEmail };\n\n        fetch('forgot_password', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: data\n        }).then(() => {\n            console.log('your email: ', data)\n        })\n    }\n\n    return (\n        <>\n            {/* <Modal show={show} onHide={handleClose}>\n                <form onSubmit={forgotSubmit}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Forgot Password</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={(e) => setForgotEmail(e.target.value)} required />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        {/* <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button> */}\n                        {/* <Button type=\"submit\" variant=\"dark\" onClick={handleClose}>\n                            Submit\n                    </Button>\n                    </Modal.Footer>\n                </form>\n            </Modal> */} */}\n            <Grid>\n                <Paper className='paperStyle' style={paperStyle}>\n                    <Grid align='center'>\n                        <Avatar style={avatarStyle}><LockOutlinedIcon /></Avatar>\n                        <h2>Login</h2>\n                    </Grid>\n                    <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\n                        {(props) => (\n                            <Form>\n                                <Field as={TextField} type='email' label='Email' name='email' placeholder='Enter your email' fullWidth required \n                                helperText={<ErrorMessage name=\"email\" />} />\n                                <Field as={TextField} type='password' label='Password' name=\"password\" placeholder='Enter your password' fullWidth required helperText={<ErrorMessage name=\"password\" />}/>\n                                {/* <Link to=\"/user\" style={{ textDecoration: 'none' }}> */}\n                                    <Button type='submit' variant='dark' style={btnstyle} disabled={props.isSubmitting} className=\"btn-block\">{props.isSubmitting ? \"Loading\" : \"Log in\"}</Button>\n                                {/* </Link> */}\n                            </Form>\n                        )}\n                    </Formik>\n                    <a href=\"/oauth2/authorization/google\">Sign in with Google</a>\n                    <Typography>\n                        <a href=\"#\" style={linkButton} onClick={handleShow}>\n                            Forget password?\n                    </a>\n                    </Typography>\n                    <Typography> Do you have an account?&nbsp;\n                    <NavLink to=\"/signup\">Sign up?</NavLink>\n                    </Typography>\n                </Paper>\n            </Grid>\n        </>\n    )\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}